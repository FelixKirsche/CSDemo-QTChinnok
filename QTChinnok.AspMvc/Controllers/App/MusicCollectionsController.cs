//@GeneratedCode
namespace QTChinnok.AspMvc.Controllers.App
{
    using Microsoft.AspNetCore.Mvc;
    using TAccessModel = QTChinnok.Logic.Models.App.MusicCollection;
    using TViewModel = QTChinnok.AspMvc.Models.App.MusicCollection;
    using TFilterModel = QTChinnok.AspMvc.Models.App.MusicCollectionFilter;
    using TAccessContract = QTChinnok.Logic.Contracts.App.IMusicCollectionsAccess<QTChinnok.Logic.Models.App.MusicCollection>;
    ///
    /// Generated by the generator
    ///
    public sealed partial class MusicCollectionsController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the generator
        ///
        static MusicCollectionsController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        protected override string ControllerName => "MusicCollections";
        ///
        /// Generated by the generator
        ///
        public MusicCollectionsController(QTChinnok.Logic.Contracts.App.IMusicCollectionsAccess<TAccessModel> other)
        : base(other)
        {
            Constructing();
            
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);
    }
}
